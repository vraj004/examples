% generates a 3D mesh for FSI problem: plate in a cross flow
% author: Andreas Hessenthaler (C)
%

clear all
close all

format longe

tic;

abc = clock;
[abc(4), abc(5)]

disp 'START: 3D PLATE MESH GENERATOR'

SolidOriginX = 3;
SolidOriginY = 2;
SolidOriginZ = 0;

SolidX = 2;
SolidY = 1.25E-2;
SolidZ = 3;

FluidX = 8;
FluidY = 12+SolidY;
FluidZ = 5;

SolidElementNumberX = 2;%10;
SolidElementNumberY = 1;
SolidElementNumberZ = 3;%18;

SolidElementSizeX = SolidX / SolidElementNumberX;
SolidElementSizeY = SolidY / SolidElementNumberY;
SolidElementSizeZ = SolidZ / SolidElementNumberZ;

FluidElementSizeX = SolidElementSizeX;
FluidElementSizeY = SolidElementSizeX;
FluidElementSizeZ = SolidElementSizeZ;

% number of x elements
FluidElementNumberX = FluidX/FluidElementSizeX;
% number of x elements 0 to structure
FluidElementNumberXsolid = SolidOriginX/FluidElementSizeX;
% number of y elements  0 to structure
FluidElementNumberYsolid = SolidOriginY/FluidElementSizeY;
% number of y elements structure to end
FluidElementNumberYrest = (FluidY-SolidY-SolidOriginY)/FluidElementSizeY;
% number of z elements 0 to end of structure
FluidElementNumberZplaneZ = SolidElementNumberZ;
% number of z elements end of structure to end
FluidElementNumberZFluidZ = (FluidZ-SolidZ-SolidOriginZ)/FluidElementSizeX;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% z = 0 plane
% y = 0 --> y = SolidOriginY
% quadratic elements
FluidGeometryX = 0:FluidElementSizeX/2:FluidX;
FluidGeometryY = zeros(1, size(FluidGeometryX, 2));
% linear elements
FluidGeometryPressureX = 0:FluidElementSizeX:FluidX;
FluidGeometryPressureY = zeros(1, size(FluidGeometryPressureX, 2));
% number of fluid nodes in x direction
temp = size(FluidGeometryX, 2);
tempPressure = size(FluidGeometryPressureX, 2);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% quadratic elements
for i = 1:FluidElementNumberYsolid*2 % (1)
    FluidGeometryX = [FluidGeometryX, FluidGeometryX(end-temp+1:end)];
    FluidGeometryY = [FluidGeometryY, ...
        FluidGeometryY(end-temp+1:end)+FluidElementSizeY/2];
end
temp1=size(FluidGeometryX, 2);
FluidGeometryX = [FluidGeometryX, 0:FluidElementSizeX/2:SolidOriginX];
temp5 = size(FluidGeometryX, 2);
FluidGeometryX = [FluidGeometryX, ...
    (SolidOriginX+SolidX):FluidElementSizeX/2:FluidX];
temp2=size(FluidGeometryX, 2);
FluidGeometryY = [FluidGeometryY, ...
    (FluidGeometryY(end)+SolidY/2)*ones(1,temp2-temp1)];
% linear elements
for i = 1:FluidElementNumberYsolid
    FluidGeometryPressureX = [FluidGeometryPressureX, ...
        FluidGeometryPressureX(end-tempPressure+1:end)];
    FluidGeometryPressureY = [FluidGeometryPressureY, ...
        FluidGeometryPressureY(end-tempPressure+1:end)+FluidElementSizeY];
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% y = SolidOriginY+SolidY --> y = FluidY
% quadratic elements
FluidGeometryX = [FluidGeometryX, FluidGeometryX(1:temp)];
FluidGeometryY = [FluidGeometryY, ...
    (FluidGeometryY(end)+SolidY/2)*ones(1, temp)];
for i = 1:FluidElementNumberYrest*2 % (2)
    FluidGeometryX = [FluidGeometryX, FluidGeometryX(1:temp)];
    FluidGeometryY = [FluidGeometryY, ...
        (FluidGeometryY(end)+SolidElementSizeX/2)*ones(1, temp)];
end
plot(FluidGeometryX, FluidGeometryY, '*')
NumberOfFluidNodesZzeroPlane = size(FluidGeometryX, 2);
FluidGeometryZ = zeros(1, NumberOfFluidNodesZzeroPlane);
% linear elements
FluidGeometryPressureX = [FluidGeometryPressureX, ...
    FluidGeometryPressureX(1:tempPressure)];
FluidGeometryPressureY = [FluidGeometryPressureY, ...
    (FluidGeometryPressureY(end)+SolidY)*ones(1, tempPressure)];
for i = 1:FluidElementNumberYrest
    FluidGeometryPressureX = [FluidGeometryPressureX, ...
        FluidGeometryPressureX(1:tempPressure)];
    FluidGeometryPressureY = [FluidGeometryPressureY, ...
        (FluidGeometryPressureY(end)+FluidElementSizeY)*ones(1, tempPressure)];
end
NumberOfFluidNodesZzeroPlanePressure = size(FluidGeometryPressureX, 2);
FluidGeometryPressureZ = zeros(1, NumberOfFluidNodesZzeroPlanePressure);
% end of z = 0 plane
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% z = 0+SolidElementSizeX/2 --> z = SolidZ-SolidElementSizeX/2
% quadratic elements
for i = 1:FluidElementNumberZplaneZ*2-1 % (3)
    FluidGeometryX = [FluidGeometryX, ...
        FluidGeometryX(1:NumberOfFluidNodesZzeroPlane)];
    FluidGeometryY = [FluidGeometryY, ...
        FluidGeometryY(1:NumberOfFluidNodesZzeroPlane)];
    FluidGeometryZ = [FluidGeometryZ, ...
        FluidGeometryZ(end-NumberOfFluidNodesZzeroPlane+1:end)+SolidElementSizeZ/2];
end
temp3 = size(FluidGeometryZ, 2);
%plot3(FluidGeometryX, FluidGeometryY,FluidGeometryZ, '*')
% linear elements
for i = 1:FluidElementNumberZplaneZ-1
    FluidGeometryPressureX = [FluidGeometryPressureX, ...
        FluidGeometryPressureX(1:NumberOfFluidNodesZzeroPlanePressure)];
    FluidGeometryPressureY = [FluidGeometryPressureY, ...
        FluidGeometryPressureY(1:NumberOfFluidNodesZzeroPlanePressure)];
    FluidGeometryPressureZ = [FluidGeometryPressureZ, ...
        FluidGeometryPressureZ(end-NumberOfFluidNodesZzeroPlanePressure+1:end)+SolidElementSizeZ];
end
%plot3(FluidGeometryPressureX, FluidGeometryPressureY, FluidGeometryPressureZ, '*')
tempPressure3 = size(FluidGeometryPressureZ, 2);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% z = SolidZ
% quadratic elements
additional = (SolidOriginX+SolidElementSizeX/2):SolidElementSizeX/2:(SolidOriginX+SolidX-SolidElementSizeX/2);
additionalSize = size(additional, 2);
planeSolidZX = [FluidGeometryX(1:temp5), additional, ...
    FluidGeometryX(temp5+1:NumberOfFluidNodesZzeroPlane)];
planeSolidZY = [FluidGeometryY(1:temp5), ...
    FluidGeometryY(temp5)*ones(1, additionalSize), ...
    FluidGeometryY(temp5+1:NumberOfFluidNodesZzeroPlane)];
planeSolidZZ = [SolidZ*ones(1, ...
    size([FluidGeometryY(1:temp5), ...
    FluidGeometryY(temp5)*ones(1, additionalSize), ...
    FluidGeometryY(temp5+1:NumberOfFluidNodesZzeroPlane)],2))];
FluidGeometryX = [FluidGeometryX, planeSolidZX];
FluidGeometryY = [FluidGeometryY, planeSolidZY];
FluidGeometryZ = [FluidGeometryZ, planeSolidZZ];
%plot3(FluidGeometryX, FluidGeometryY, FluidGeometryZ, '*')
% linear elements
FluidGeometryPressureX = [FluidGeometryPressureX, ...
    FluidGeometryPressureX(1:NumberOfFluidNodesZzeroPlanePressure)];
FluidGeometryPressureY = [FluidGeometryPressureY, ...
    FluidGeometryPressureY(1:NumberOfFluidNodesZzeroPlanePressure)];
FluidGeometryPressureZ = [FluidGeometryPressureZ, ...
    FluidGeometryPressureZ(end-NumberOfFluidNodesZzeroPlanePressure+1:end)+SolidElementSizeZ];
%plot3(FluidGeometryPressureX, FluidGeometryPressureY, FluidGeometryPressureZ, '*')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% z = SolidZ + SolidElementSizeX/2 --> z = FluidZ
for i = 1:FluidElementNumberZFluidZ*2 % (4)
    FluidGeometryX = [FluidGeometryX, planeSolidZX];
    FluidGeometryY = [FluidGeometryY, planeSolidZY];
    FluidGeometryZ = [FluidGeometryZ, planeSolidZZ+SolidElementSizeX/2*i];
end
%plot3(FluidGeometryX, FluidGeometryY, FluidGeometryZ, '*')
for i = 1:(FluidZ-SolidZ)/SolidElementSizeX
    FluidGeometryPressureX = [FluidGeometryPressureX, ...
        FluidGeometryPressureX(1:NumberOfFluidNodesZzeroPlanePressure)];
    FluidGeometryPressureY = [FluidGeometryPressureY, ...
        FluidGeometryPressureY(1:NumberOfFluidNodesZzeroPlanePressure)];
    FluidGeometryPressureZ = [FluidGeometryPressureZ, ...
        ones(1, NumberOfFluidNodesZzeroPlanePressure)*(FluidGeometryPressureZ(end)+SolidElementSizeX)];
end
plot3(FluidGeometryPressureX, FluidGeometryPressureY, FluidGeometryPressureZ, '*')
% end of fluid geometry
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
InterfaceXi1 = [0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0];
InterfaceXi2 = [0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% solid plate
% quadratic elements
SolidGeometryX = SolidOriginX:SolidElementSizeX/2:(SolidOriginX+SolidX);
InterfacePlaneZX = [SolidGeometryX, SolidGeometryX, SolidGeometryX];
InterfaceGeometryX = [SolidGeometryX, SolidGeometryX(1), ...
    SolidGeometryX(end), SolidGeometryX];
NumberInterfaceRow = size(SolidGeometryX, 2);
NumberInterfacePlane = size(InterfaceGeometryX, 2);
InterfaceElementNodeNumbers = [1, ...
    2, ...
    3, ...
    1+NumberInterfacePlane, ...
    2+NumberInterfacePlane, ...
    3+NumberInterfacePlane, ...
    1+NumberInterfacePlane*2, ...
    2+NumberInterfacePlane*2, ...
    3+NumberInterfacePlane*2];
for i = 2:SolidElementNumberX
    InterfaceElementNodeNumbers(i, :) = ...
        InterfaceElementNodeNumbers(i-1, :) + 2;
end
InterfaceElementNodeNumbers(SolidElementNumberX+1,:) = ...
    [1, ...
    1+NumberInterfaceRow, ...
    1+NumberInterfaceRow+2, ...
    1+NumberInterfacePlane, ...
    1+NumberInterfaceRow+NumberInterfacePlane, ...
    1+NumberInterfaceRow+2+NumberInterfacePlane, ...
    1+NumberInterfacePlane*2, ...
    1+NumberInterfaceRow+NumberInterfacePlane*2, ...
    1+NumberInterfaceRow+2+NumberInterfacePlane*2];
%     [1+NumberInterfaceRow+2, ...
%     1+NumberInterfaceRow, ...
%     1, ...
%     1+NumberInterfaceRow+2+NumberInterfacePlane, ...
%     1+NumberInterfaceRow+NumberInterfacePlane, ...
%     1+NumberInterfacePlane, ...
%     1+NumberInterfaceRow+2+NumberInterfacePlane*2, ...
%     1+NumberInterfaceRow+NumberInterfacePlane*2, ...
%     1+NumberInterfacePlane*2];
InterfaceElementNodeNumbers(SolidElementNumberX+2,:) = ...
    [NumberInterfaceRow, ...
    NumberInterfaceRow+2, ...
    NumberInterfacePlane, ...
    NumberInterfaceRow+NumberInterfacePlane, ...
    NumberInterfaceRow+2+NumberInterfacePlane, ...
    NumberInterfacePlane+NumberInterfacePlane, ...
    NumberInterfaceRow+NumberInterfacePlane*2, ...
    NumberInterfaceRow+2+NumberInterfacePlane*2, ...
    NumberInterfacePlane+NumberInterfacePlane*2];
InterfaceElementNodeNumbers(SolidElementNumberX+3,:) = ...
    [NumberInterfaceRow+3, ...
    NumberInterfaceRow+4, ...
    NumberInterfaceRow+5, ...
    NumberInterfaceRow+3+NumberInterfacePlane, ...
    NumberInterfaceRow+4+NumberInterfacePlane, ...
    NumberInterfaceRow+5+NumberInterfacePlane, ...
    NumberInterfaceRow+3+NumberInterfacePlane*2, ...
    NumberInterfaceRow+4+NumberInterfacePlane*2, ...
    NumberInterfaceRow+5+NumberInterfacePlane*2];
for i = SolidElementNumberX+3+1:SolidElementNumberX*2+2
    InterfaceElementNodeNumbers(i, :) = ...
        InterfaceElementNodeNumbers(i-1, :) + 2;
end
for i = 2:SolidElementNumberZ
    if (i~=SolidElementNumberZ)
        InterfaceElementNodeNumbers = [InterfaceElementNodeNumbers; ...
            InterfaceElementNodeNumbers(end-(SolidElementNumberY+SolidElementNumberX)*2+1:end, :)+NumberInterfacePlane*2];
    else
        next = [InterfaceElementNodeNumbers(end, end)-NumberInterfacePlane+1, ...
            InterfaceElementNodeNumbers(end, end)-NumberInterfacePlane+2, ...
            InterfaceElementNodeNumbers(end, end)-NumberInterfacePlane+3, ...
            InterfaceElementNodeNumbers(end, end)+1, ...
            InterfaceElementNodeNumbers(end, end)+2, ...
            InterfaceElementNodeNumbers(end, end)+3, ...
            InterfaceElementNodeNumbers(end, end)+NumberInterfacePlane+1, ...
            InterfaceElementNodeNumbers(end, end)+NumberInterfacePlane+2, ...
            InterfaceElementNodeNumbers(end, end)+NumberInterfacePlane+3];
        tempVar = InterfaceElementNodeNumbers(end, end)-NumberInterfacePlane+1;
        for i = 1:SolidElementNumberX
            InterfaceElementNodeNumbers(end+1, :) = next;
            next = next + 2;
        end
        next = [tempVar, ...
            tempVar+NumberInterfaceRow, ...
            tempVar+NumberInterfaceRow+2, ...
            tempVar+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow+2+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow+2+NumberInterfacePlane+NumberInterfaceRow, ...
            tempVar+NumberInterfaceRow+2+NumberInterfacePlane+NumberInterfaceRow*2, ...
            tempVar+NumberInterfaceRow+2+NumberInterfacePlane+NumberInterfaceRow*3];
            
%             tempVar+NumberInterfaceRow+2, ...
%             tempVar+NumberInterfaceRow, ...
%             tempVar, ...
%             tempVar+NumberInterfaceRow+2+NumberInterfacePlane, ...
%             tempVar+NumberInterfaceRow+NumberInterfacePlane, ...
%             tempVar+NumberInterfacePlane, ...
%             tempVar+NumberInterfaceRow+2+NumberInterfacePlane+NumberInterfaceRow*3, ...
%             tempVar+NumberInterfaceRow+2+NumberInterfacePlane+NumberInterfaceRow*2, ...
%             tempVar+NumberInterfaceRow+2+NumberInterfacePlane+NumberInterfaceRow];
        InterfaceElementNodeNumbers(end+1, :) = next;
        next = [tempVar+NumberInterfaceRow-1, ...
            tempVar+NumberInterfaceRow-1+2, ...
            tempVar+NumberInterfaceRow-1+2+NumberInterfaceRow, ...
            tempVar+NumberInterfaceRow-1+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow-1+2+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow-1+2+NumberInterfaceRow+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow-1+NumberInterfacePlane+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow-1+NumberInterfacePlane+NumberInterfacePlane+NumberInterfaceRow, ...
            tempVar+NumberInterfaceRow-1+NumberInterfacePlane+NumberInterfacePlane+NumberInterfaceRow+NumberInterfaceRow];
        InterfaceElementNodeNumbers(end+1, :) = next;
        next = [tempVar+NumberInterfaceRow+2, ...
            tempVar+NumberInterfaceRow+2+1, ...
            tempVar+NumberInterfaceRow+2+2, ...
            tempVar+NumberInterfaceRow+2+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow+2+1+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow+2+2+NumberInterfacePlane, ...
            tempVar+NumberInterfaceRow+2+NumberInterfacePlane*2+NumberInterfaceRow-2, ...
            tempVar+NumberInterfaceRow+2+1+NumberInterfacePlane*2+NumberInterfaceRow-2, ...
            tempVar+NumberInterfaceRow+2+2+NumberInterfacePlane*2+NumberInterfaceRow-2];
        for i = 1:SolidElementNumberX
            InterfaceElementNodeNumbers(end+1, :) = next;
            next = next + 2;
        end
        next = [tempVar+NumberInterfacePlane*2, ...
            tempVar+NumberInterfacePlane*2+1, ...
            tempVar+NumberInterfacePlane*2+2, ...
            tempVar+NumberInterfacePlane*2+NumberInterfaceRow, ...
            tempVar+NumberInterfacePlane*2+1+NumberInterfaceRow, ...
            tempVar+NumberInterfacePlane*2+2+NumberInterfaceRow, ...
            tempVar+NumberInterfacePlane*2+NumberInterfaceRow*2, ...
            tempVar+NumberInterfacePlane*2+1+NumberInterfaceRow*2, ...
            tempVar+NumberInterfacePlane*2+2+NumberInterfaceRow*2];
        for i = 1:SolidElementNumberX
            InterfaceElementNodeNumbers(end+1, :) = next;
            next = next + 2;
        end
    end
end
%%%% up to SolidZ
SolidGeometryY = SolidOriginY*ones(1, size(SolidGeometryX,2));
InterfacePlaneZY = [SolidGeometryY, SolidGeometryY+SolidY/2, SolidGeometryY+SolidY];
InterfaceGeometryY = [SolidGeometryY, SolidGeometryY(end)+SolidY/2, SolidGeometryY(end)+SolidY/2, SolidGeometryY+SolidY];
SolidGeometryX = [SolidGeometryX, SolidGeometryX, SolidGeometryX];
SolidGeometryY = [SolidGeometryY, SolidGeometryY+SolidY/2, SolidGeometryY+SolidY];
SolidGeometryZ = zeros(1, size(SolidGeometryY, 2));
InterfaceGeometryZ = zeros(1, size(InterfaceGeometryX, 2));
InterfacePlaneZZ = ones(1, size(InterfacePlaneZX, 2)) * SolidZ;
temp10 = size(SolidGeometryX, 2);
temp11 = size(InterfaceGeometryX, 2);
for i = 1:SolidElementNumberZ*2 % (5)
    SolidGeometryX = [SolidGeometryX, SolidGeometryX(1:temp10)];
    SolidGeometryY = [SolidGeometryY, SolidGeometryY(1:temp10)];
    SolidGeometryZ = [SolidGeometryZ, SolidGeometryZ(1:temp10)+i*SolidElementSizeZ/2];
end
for i = 1:SolidElementNumberZ*2-1 % (5)
    InterfaceGeometryX = [InterfaceGeometryX, InterfaceGeometryX(1:temp11)];
    InterfaceGeometryY = [InterfaceGeometryY, InterfaceGeometryY(1:temp11)];
    InterfaceGeometryZ = [InterfaceGeometryZ, InterfaceGeometryZ(1:temp11)+i*SolidElementSizeZ/2];
end
InterfaceGeometryX = [InterfaceGeometryX, InterfacePlaneZX];
InterfaceGeometryY = [InterfaceGeometryY, InterfacePlaneZY];
InterfaceGeometryZ = [InterfaceGeometryZ, InterfacePlaneZZ];
% linear elements
SolidGeometryPressureX = SolidOriginX:SolidElementSizeX:(SolidOriginX+SolidX);
SolidGeometryPressureY = SolidOriginY*ones(1, size(SolidGeometryPressureX,2));
SolidGeometryPressureX = [SolidGeometryPressureX, SolidGeometryPressureX];
SolidGeometryPressureY = [SolidGeometryPressureY, SolidGeometryPressureY+SolidY];
SolidGeometryPressureZ = zeros(1, size(SolidGeometryPressureY, 2));
temp11 = size(SolidGeometryPressureX, 2);
for i = 1:SolidElementNumberZ
    SolidGeometryPressureX = [SolidGeometryPressureX, SolidGeometryPressureX(1:temp11)];
    SolidGeometryPressureY = [SolidGeometryPressureY, SolidGeometryPressureY(1:temp11)];
    SolidGeometryPressureZ = [SolidGeometryPressureZ, SolidGeometryPressureZ(1:temp11)+i*SolidElementSizeZ];
end
% end of solid & interface geometry
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% node numbers
NumberOfSolidPressureNodes = size(SolidGeometryPressureX, 2)
SolidNodesPressure = 1:NumberOfSolidPressureNodes;
NumberOfSolidNodes = size(SolidGeometryX, 2)
SolidNodes = zeros(1, NumberOfSolidNodes);
% InterfaceNodes' inital allocated size is not correct. Only to make sure
% that size(InterfaceNodes,1)==2
InterfaceNodes = zeros(2, 2);
k = 1;
SolidInterfaceNodeIterator = 1;
for i = 1:NumberOfSolidNodes
    for j = 1:NumberOfSolidPressureNodes
        if(abs(SolidGeometryX(i)-SolidGeometryPressureX(j))<SolidY/3 && ...
                abs(SolidGeometryY(i)-SolidGeometryPressureY(j))<SolidY/3 && ...
                abs(SolidGeometryZ(i)-SolidGeometryPressureZ(j))<SolidY/3)
            if(SolidNodes(i)~=0)
                k=k-1;
% % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % % %                 % CHECK that again!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                SolidInterfaceNodeIterator = SolidInterfaceNodeIterator - 1;
            end
            SolidNodes(i) = j;
            InterfaceNodes(1, SolidInterfaceNodeIterator) = j;
            SolidInterfaceNodeIterator = SolidInterfaceNodeIterator + 1;
            break
        else
            if(SolidNodes(i)==0)
                SolidNodes(i) = NumberOfSolidPressureNodes+k;
                if(~((SolidOriginX<SolidGeometryX(i) && SolidGeometryX(i)<(SolidOriginX+SolidX)) && (SolidOriginY<SolidGeometryY(i) && SolidGeometryY(i)<(SolidOriginY+SolidY))) || ...
                        abs(SolidGeometryZ(i)-(SolidOriginZ+SolidZ))<SolidY/3)
                    InterfaceNodes(1, SolidInterfaceNodeIterator) = NumberOfSolidPressureNodes+k;
                    SolidInterfaceNodeIterator = SolidInterfaceNodeIterator + 1;
                end
                k = k + 1;
            end
        end
    end
end
if (sum(1:NumberOfSolidNodes==unique(SolidNodes))==NumberOfSolidNodes)
    % correct
else
    disp 'Solid node numbers are set incorrect.'
end
NumberOfSolidElements = ...
    SolidElementNumberX * SolidElementNumberY * SolidElementNumberZ;
ArrayIndices = [1, 2, 1+SolidElementNumberX+1, 2+SolidElementNumberX+1, 1+(SolidElementNumberX+1)*(SolidElementNumberY+1), 2+(SolidElementNumberX+1)*(SolidElementNumberY+1), ...
    1+(SolidElementNumberX+1)*(SolidElementNumberY+1)+SolidElementNumberX+1, 2+(SolidElementNumberX+1)*(SolidElementNumberY+1)+SolidElementNumberX+1];
Xi1 = [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0];
Xi2 = [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0];
Xi3 = [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0];
Xi1Q = [0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0];
Xi2Q = [0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0];
Xi3Q = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ArrayIndicesQ = [1, ...
    2, ...
    3, ...
    1+SolidElementNumberX*2+1, ...
    2+SolidElementNumberX*2+1, ...
    3+SolidElementNumberX*2+1, ...
    1+SolidElementNumberX*4+2, ...
    2+SolidElementNumberX*4+2, ...
    3+SolidElementNumberX*4+2];
ArrayIndicesQ = [ArrayIndicesQ, ...
    ArrayIndicesQ+(SolidElementNumberX*2+1)*3, ...
    ArrayIndicesQ+(SolidElementNumberX*2+1)*3*2];

SolidElementNodeNumbers = zeros(NumberOfSolidElements, size(ArrayIndices, 2));
SolidElementNodeNumbersQ = zeros(NumberOfSolidElements, size(ArrayIndicesQ, 2));
for i = 1:SolidElementNumberX
    SolidElementNodeNumbers(i,:) = ArrayIndices;
    ArrayIndices = ArrayIndices+1;
    SolidElementNodeNumbersQ(i,:) = ArrayIndicesQ;
    ArrayIndicesQ = ArrayIndicesQ+2;
end
for i = 1:SolidElementNumberZ-1
    SolidElementNodeNumbers(1+SolidElementNumberX*i:SolidElementNumberX*i+SolidElementNumberX,:) = ...
        SolidElementNodeNumbers(1+SolidElementNumberX*(i-1):SolidElementNumberX*(i-1)+SolidElementNumberX,:) + ...
        (SolidElementNumberX+1)*(SolidElementNumberY+1);
    SolidElementNodeNumbersQ(1+SolidElementNumberX*i:SolidElementNumberX*i+SolidElementNumberX,:) = ...
        SolidElementNodeNumbersQ(1+SolidElementNumberX*(i-1):SolidElementNumberX*(i-1)+SolidElementNumberX,:) + ...
        (2*SolidElementNumberX+1)*(SolidElementNumberY+1)*3; % *3 coz of quadratic elements
end

SolidElementNodeNumbersQ = SolidNodes(SolidElementNodeNumbersQ);

klk = 1;
for i = 1:NumberOfSolidNodes
    if((abs(SolidGeometryY(i)-SolidOriginY)<SolidY/3 || ...
            abs(SolidGeometryY(i)-(SolidOriginY+SolidY))<SolidY/3) || ...
            abs(SolidGeometryZ(i)-(SolidOriginZ+SolidZ))<SolidY/3 || ...
            (abs(SolidGeometryX(i)-SolidOriginX)<SolidY/3 || ...
            abs(SolidGeometryX(i)-(SolidOriginX+SolidX))<SolidY/3))
        SolidNodesOnInterfaceIndex(klk) = i;
        klk = klk + 1;
    end
end
SolidNodesOnInterface = SolidNodes(SolidNodesOnInterfaceIndex);

% % % % % count = 1;
% % % % % for i = 1:size(SolidElementNodeNumbersQ, 1)
% % % % %     for j = 1:size(SolidElementNodeNumbersQ, 2)
% % % % %         if (sum(SolidElementNodeNumbersQ(i, j)==SolidNodesOnInterface)~=0)
% % % % %             % Node number, element number, xi1, xi2, xi3, x, y, z
% % % % %             SolidInterfaceNodeInformation(count, 1) = ...
% % % % %                 SolidElementNodeNumbersQ(i, j);
% % % % %             SolidInterfaceNodeInformation(count, 2) = i;
% % % % %             SolidInterfaceNodeInformation(count, 3) = Xi1Q(j);
% % % % %             SolidInterfaceNodeInformation(count, 4) = Xi2Q(j);
% % % % %             SolidInterfaceNodeInformation(count, 5) = Xi3Q(j);
% % % % %             if (SolidInterfaceNodeInformation(count, 2)~=SolidInterfaceNodeInformation(count-1, 2))
% % % % %                 if (count == 4)
% % % % %                     count = 0;
% % % % %                 elseif (SolidInterfaceNodeInformation(count-1, 2)~=SolidInterfaceNodeInformation(count-9, 2))
% % % % %                     count = count - 10;
% % % % %                 end
% % % % %             end
% % % % %             count = count + 1;
% % % % %         end
% % % % %     end
% % % % % end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% alternative for SolidInterfaceNodeInformation
% surfaceFlag values: 1 - front, 2 - left, 3 - right, 4 - back, 5 - top
SolidInterfaceNodeInformationElementNumbersForConstruction = ...
    [1:SolidElementNumberX, 1, SolidElementNumberX, 1:SolidElementNumberX];
sizeConstruction = size(SolidInterfaceNodeInformationElementNumbersForConstruction, 2);
surfaceFlags = [ones(1, SolidElementNumberX), ...
    2*ones(1, SolidElementNumberY), 3*ones(1, SolidElementNumberY), ...
    4*ones(1, SolidElementNumberX)];
surfaceFlags1234 = surfaceFlags;
for i = 2:SolidElementNumberZ
    SolidInterfaceNodeInformationElementNumbersForConstruction = ...
        [SolidInterfaceNodeInformationElementNumbersForConstruction, ...
        SolidInterfaceNodeInformationElementNumbersForConstruction(end-sizeConstruction+1:end)+(SolidElementNumberX*SolidElementNumberY)];
    surfaceFlags = [surfaceFlags, surfaceFlags1234];
end
SolidInterfaceNodeInformationElementNumbersForConstruction = ...
    [SolidInterfaceNodeInformationElementNumbersForConstruction, ...
    1+SolidElementNumberX*SolidElementNumberY*(SolidElementNumberZ-1):SolidElementNumberX*SolidElementNumberY*SolidElementNumberZ];
surfaceFlags = [surfaceFlags, 5*ones(1, SolidElementNumberX)];
count = 1;
for i = 1:size(SolidInterfaceNodeInformationElementNumbersForConstruction, 2)
    elementNumber = SolidInterfaceNodeInformationElementNumbersForConstruction(i);
    surfaceFlag = surfaceFlags(i);
    for j = 1:size(SolidElementNodeNumbersQ, 2)
        if (sum(SolidElementNodeNumbersQ(elementNumber, j)==SolidNodesOnInterface)~=0)
            if ((surfaceFlag==1 && Xi2Q(j)==0) || ...
                    (surfaceFlag==2 && Xi1Q(j)==0) || ...
                    (surfaceFlag==3 && Xi1Q(j)==1.0) || ...
                    (surfaceFlag==4 && Xi2Q(j)==1.0) || ...
                    (surfaceFlag==5 && Xi3Q(j)==1.0))
                % Node number, element number, xi1, xi2, xi3, x, y, z
                SolidInterfaceNodeInformation(count, 1) = ...
                    SolidElementNodeNumbersQ(elementNumber, j);
                SolidInterfaceNodeInformation(count, 2) = elementNumber;
                SolidInterfaceNodeInformation(count, 3) = Xi1Q(j);
                SolidInterfaceNodeInformation(count, 4) = Xi2Q(j);
                SolidInterfaceNodeInformation(count, 5) = Xi3Q(j);
                count = count + 1;
            end
        end
    end
    % we need to swap nodes to have the correct node order
    if (surfaceFlag==2)
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Fluid node numbers %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
disp 'START: CALCULATION OF FLUID NODE NUMBERS (global)'
NumberOfFluidPressureNodes = size(FluidGeometryPressureX, 2);
NumberOfFluidNodes = size(FluidGeometryX, 2);
FluidNodes = zeros(1, NumberOfFluidNodes);
k = 1;
for i = 1:NumberOfFluidNodes
    for j = 1:NumberOfFluidPressureNodes
        if (abs(FluidGeometryX(i)-FluidGeometryPressureX(j))<SolidY/3 && ...
                abs(FluidGeometryY(i)-FluidGeometryPressureY(j))<SolidY/3 && ...
                abs(FluidGeometryZ(i)-FluidGeometryPressureZ(j))<SolidY/3)
            if (FluidNodes(i)~=0)
                k = k - 1;
            end
            FluidNodes(i) = j;
            break
        else
            if (FluidNodes(i) == 0)
                FluidNodes(i) = NumberOfFluidPressureNodes + k;
                k = k + 1;
            end
        end
    end
end
sanityCheck = unique(FluidNodes);
if (sanityCheck(1)==0 || size(sanityCheck,2)~=size(FluidNodes,2))
    disp 'Invalid global node numbers for fluid domain.'
    sanityCheck(1)
    size(sanityCheck,2)
    size(FluidNodes,2)
else
    disp 'Unique global node numbers for fluid domain.'
end
NumberOfFluidXNodes = size(0:FluidElementSizeX/2:FluidX,2);
disp 'END: CALCULATION OF FLUID NODE NUMBERS (global)'
% Fluid element node numbers %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ArrayIndices = [1, ...
    2, ...
    3, ...
    1+NumberOfFluidXNodes, ...
    2+NumberOfFluidXNodes, ...
    3+NumberOfFluidXNodes, ...
    1+NumberOfFluidXNodes*2, ...
    2+NumberOfFluidXNodes*2, ...
    3+NumberOfFluidXNodes*2, ...
    1+NumberOfFluidNodesZzeroPlane, ...
    2+NumberOfFluidNodesZzeroPlane, ...
    3+NumberOfFluidNodesZzeroPlane, ...
    1+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes, ...
    2+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes, ...
    3+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes, ...
    1+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes*2, ...
    2+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes*2, ...
    3+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes*2, ...
    1+NumberOfFluidNodesZzeroPlane*2, ...
    2+NumberOfFluidNodesZzeroPlane*2, ...
    3+NumberOfFluidNodesZzeroPlane*2, ...
    1+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes, ...
    2+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes, ...
    3+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes, ...
    1+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes*2, ...
    2+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes*2, ...
    3+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes*2];
startingArrayIndices = ArrayIndices;
% % first row
for i = 2:FluidElementNumberX
    ArrayIndices = [ArrayIndices; ArrayIndices(end,:)+2];
end
NumberOfArrayIndices = size(ArrayIndices, 1);
% % second row till solid
for i = 1:FluidElementNumberYsolid-1
    ArrayIndices = [ArrayIndices; ArrayIndices(end+1-NumberOfArrayIndices:end,:)+NumberOfFluidXNodes*2];
end
% % row with solid plate, first part
additionalArrayIndices = ...
    [1+NumberOfFluidXNodes*(FluidElementNumberYsolid*2), ...
    2+NumberOfFluidXNodes*(FluidElementNumberYsolid*2), ...
    3+NumberOfFluidXNodes*(FluidElementNumberYsolid*2), ...
    1+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes, ...
    2+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes, ...
    3+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes, ...
    1+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes*2-additionalSize, ...
    2+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes*2-additionalSize, ...
    3+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes*2-additionalSize, ...
    1+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidNodesZzeroPlane, ...
    2+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidNodesZzeroPlane, ...
    3+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidNodesZzeroPlane, ...
    1+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    2+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    3+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    1+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes*2-additionalSize+NumberOfFluidNodesZzeroPlane, ...
    2+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes*2-additionalSize+NumberOfFluidNodesZzeroPlane, ...
    3+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes*2-additionalSize+NumberOfFluidNodesZzeroPlane, ...
    1+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidNodesZzeroPlane*2, ...
    2+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidNodesZzeroPlane*2, ...
    3+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidNodesZzeroPlane*2, ...
    1+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2, ...
    2+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2, ...
    3+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2, ...
    1+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes*2-additionalSize+NumberOfFluidNodesZzeroPlane*2, ...
    2+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes*2-additionalSize+NumberOfFluidNodesZzeroPlane*2, ...
    3+NumberOfFluidXNodes*(FluidElementNumberYsolid*2)+NumberOfFluidXNodes*2-additionalSize+NumberOfFluidNodesZzeroPlane*2];
for i = 2:FluidElementNumberXsolid
    additionalArrayIndices = [additionalArrayIndices; additionalArrayIndices(end,:)+2];
end
% first node of last element before structure + (2+additionalSize+1) >>>>
% first node of first element after structure
tempp = additionalArrayIndices(end, 1)+2+additionalSize+1;
newIndices = [tempp, ...
    tempp+1, ...
    tempp+2, ...
    tempp+NumberOfFluidXNodes-additionalSize, ...
    tempp+NumberOfFluidXNodes-additionalSize+1, ...
    tempp+NumberOfFluidXNodes-additionalSize+2, ...
    tempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidXNodes, ...
    tempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidXNodes, ...
    tempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidXNodes, ...
    tempp+NumberOfFluidNodesZzeroPlane, ...
    tempp+1+NumberOfFluidNodesZzeroPlane, ...
    tempp+2+NumberOfFluidNodesZzeroPlane, ...
    tempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidNodesZzeroPlane, ...
    tempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidNodesZzeroPlane, ...
    tempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidNodesZzeroPlane, ...
    tempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    tempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    tempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    tempp+NumberOfFluidNodesZzeroPlane*2, ...
    tempp+1+NumberOfFluidNodesZzeroPlane*2, ...
    tempp+2+NumberOfFluidNodesZzeroPlane*2, ...
    tempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidNodesZzeroPlane*2, ...
    tempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidNodesZzeroPlane*2, ...
    tempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidNodesZzeroPlane*2, ...
    tempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2, ...
    tempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2, ...
    tempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2];
additionalArrayIndices = [additionalArrayIndices; ...
    newIndices];
for i = 2:FluidElementNumberXsolid
    additionalArrayIndices = [additionalArrayIndices; additionalArrayIndices(end,:)+2];
end
ArrayIndices = [ArrayIndices; additionalArrayIndices];
% % rows till FluidY
% missingZeroPlaneArrayIndices = startingArrayIndices + ...
%     NumberOfFluidXNodes*(FluidElementNumberYsolid*2+2) - additionalSize;

% first node of first element in row with structure
temppp = additionalArrayIndices(1, 7);
missingZeroPlaneArrayIndices = [temppp, ...
    temppp+1, ...
    temppp+2, ...
    temppp+NumberOfFluidXNodes, ...
    temppp+1+NumberOfFluidXNodes, ...
    temppp+2+NumberOfFluidXNodes, ...
    temppp+NumberOfFluidXNodes*2, ...
    temppp+1+NumberOfFluidXNodes*2, ...
    temppp+2+NumberOfFluidXNodes*2, ...
    temppp+NumberOfFluidNodesZzeroPlane, ...
    temppp+1+NumberOfFluidNodesZzeroPlane, ...
    temppp+2+NumberOfFluidNodesZzeroPlane, ...
    temppp+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    temppp+1+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    temppp+2+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    temppp+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane, ...
    temppp+1+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane, ...
    temppp+2+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane, ...
    temppp+NumberOfFluidNodesZzeroPlane*2, ...
    temppp+1+NumberOfFluidNodesZzeroPlane*2, ...
    temppp+2+NumberOfFluidNodesZzeroPlane*2, ...
    temppp+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2, ...
    temppp+1+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2, ...
    temppp+2+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2, ...
    temppp+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane*2, ...
    temppp+1+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane*2, ...
    temppp+2+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane*2];
for i = 2:FluidElementNumberX
    missingZeroPlaneArrayIndices = [missingZeroPlaneArrayIndices; ...
        missingZeroPlaneArrayIndices(end,:)+2];
end
missingNumberOfArrayIndices = size(missingZeroPlaneArrayIndices, 1);
for i = 2:FluidElementNumberYrest
    missingZeroPlaneArrayIndices = [missingZeroPlaneArrayIndices; ...
        missingZeroPlaneArrayIndices(end+1-missingNumberOfArrayIndices:end, :)+NumberOfFluidXNodes*2];
end
ArrayIndices = [ArrayIndices; ...
    missingZeroPlaneArrayIndices];
NumberOfPlaneArrayIndices = size(ArrayIndices, 1);
for i = 2:SolidElementNumberZ-1
    ArrayIndices = [ArrayIndices; ArrayIndices(end+1-NumberOfPlaneArrayIndices:end,:)+NumberOfFluidNodesZzeroPlane*2];
end




%%%
% last plane before fluid only plane
lastArrayIndices = [1, ...
    2, ...
    3, ...
    1+NumberOfFluidXNodes, ...
    2+NumberOfFluidXNodes, ...
    3+NumberOfFluidXNodes, ...
    1+NumberOfFluidXNodes*2, ...
    2+NumberOfFluidXNodes*2, ...
    3+NumberOfFluidXNodes*2, ...
    1+NumberOfFluidNodesZzeroPlane, ...
    2+NumberOfFluidNodesZzeroPlane, ...
    3+NumberOfFluidNodesZzeroPlane, ...
    1+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes, ...
    2+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes, ...
    3+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes, ...
    1+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes*2, ...
    2+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes*2, ...
    3+NumberOfFluidNodesZzeroPlane+NumberOfFluidXNodes*2, ...
    1+NumberOfFluidNodesZzeroPlane*2, ...
    2+NumberOfFluidNodesZzeroPlane*2, ...
    3+NumberOfFluidNodesZzeroPlane*2, ...
    1+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes, ...
    2+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes, ...
    3+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes, ...
    1+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes*2, ...
    2+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes*2, ...
    3+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes*2] + ...
    NumberOfFluidNodesZzeroPlane*2*(FluidElementNumberZplaneZ-1);
lastStartingArrayIndices = lastArrayIndices;
% % first row
for i = 2:FluidElementNumberX
    lastArrayIndices = [lastArrayIndices; lastArrayIndices(end,:)+2];
end
lastNumberOfArrayIndices = size(lastArrayIndices, 1);
% % second row till solid
for i = 1:FluidElementNumberYsolid-1
    lastArrayIndices = [lastArrayIndices; lastArrayIndices(end+1-lastNumberOfArrayIndices:end,:)+NumberOfFluidXNodes*2];
end
% last plane with structure, row with structure, first part
lastAdditionalArrayIndices = ...
    [lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9), ...
    lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9)+NumberOfFluidXNodes, ...
    lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9)+NumberOfFluidXNodes*2-additionalSize, ...
    lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9)+NumberOfFluidNodesZzeroPlane, ...
    lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9)+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9)+NumberOfFluidXNodes*2-additionalSize+NumberOfFluidNodesZzeroPlane, ...
    lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9)+NumberOfFluidNodesZzeroPlane*2, ...
    lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9)+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2, ...
    lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9)+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2+NumberOfFluidXNodes];
%     lastArrayIndices(end+1-lastNumberOfArrayIndices,7:9)+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane];
%     % wrong?
for i = 2:FluidElementNumberXsolid
    lastAdditionalArrayIndices = [lastAdditionalArrayIndices; lastAdditionalArrayIndices(end,:)+2];
end
lastArrayIndices = [lastArrayIndices; lastAdditionalArrayIndices];
% first node of first element after structure
lasttempp = lastAdditionalArrayIndices(end, 1)+2+additionalSize+1;
lastnewIndices = [lasttempp, ...
    lasttempp+1, ...
    lasttempp+2, ...
    lasttempp+NumberOfFluidXNodes-additionalSize, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+1, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+2, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidXNodes, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidXNodes, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidXNodes, ...
    lasttempp+NumberOfFluidNodesZzeroPlane, ...
    lasttempp+1+NumberOfFluidNodesZzeroPlane, ...
    lasttempp+2+NumberOfFluidNodesZzeroPlane, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidNodesZzeroPlane, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidNodesZzeroPlane, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidNodesZzeroPlane, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    lasttempp+NumberOfFluidNodesZzeroPlane*2, ...
    lasttempp+1+NumberOfFluidNodesZzeroPlane*2, ...
    lasttempp+2+NumberOfFluidNodesZzeroPlane*2, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+1+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttempp+NumberOfFluidXNodes-additionalSize+2+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2+additionalSize];
lastArrayIndices = [lastArrayIndices; ...
    lastnewIndices];
for i = 2:FluidElementNumberXsolid
    lastArrayIndices = [lastArrayIndices; lastArrayIndices(end,:)+2];
end
ArrayIndices = [ArrayIndices; lastArrayIndices];

lasttemppp = lastAdditionalArrayIndices(1, 7);
lastmissingZeroPlaneArrayIndices = [lasttemppp, ...
    lasttemppp+1, ...
    lasttemppp+2, ...
    lasttemppp+NumberOfFluidXNodes, ...
    lasttemppp+1+NumberOfFluidXNodes, ...
    lasttemppp+2+NumberOfFluidXNodes, ...
    lasttemppp+NumberOfFluidXNodes*2, ...
    lasttemppp+1+NumberOfFluidXNodes*2, ...
    lasttemppp+2+NumberOfFluidXNodes*2, ...
    lasttemppp+NumberOfFluidNodesZzeroPlane, ...
    lasttemppp+1+NumberOfFluidNodesZzeroPlane, ...
    lasttemppp+2+NumberOfFluidNodesZzeroPlane, ...
    lasttemppp+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    lasttemppp+1+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    lasttemppp+2+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane, ...
    lasttemppp+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane, ...
    lasttemppp+1+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane, ...
    lasttemppp+2+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane, ...
    lasttemppp+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttemppp+1+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttemppp+2+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttemppp+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttemppp+1+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttemppp+2+NumberOfFluidXNodes+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttemppp+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttemppp+1+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane*2+additionalSize, ...
    lasttemppp+2+NumberOfFluidXNodes*2+NumberOfFluidNodesZzeroPlane*2+additionalSize];
for i = 2:FluidElementNumberX
    lastmissingZeroPlaneArrayIndices = [lastmissingZeroPlaneArrayIndices; ...
        lastmissingZeroPlaneArrayIndices(end,:)+2];
end
lastMissingNumberOfArrayIndices = size(lastmissingZeroPlaneArrayIndices, 1);
for i = 2:FluidElementNumberYrest
    lastmissingZeroPlaneArrayIndices = [lastmissingZeroPlaneArrayIndices; ...
        lastmissingZeroPlaneArrayIndices(end+1-lastMissingNumberOfArrayIndices:end, :)+NumberOfFluidXNodes*2];
end
ArrayIndices = [ArrayIndices; ...
    lastmissingZeroPlaneArrayIndices];

%%% SolidZ --> FluidZ
FirstNodeZZPlane = 1+NumberOfFluidNodesZzeroPlane*SolidElementNumberZ*2;
NumberOfFluidNodesZZplane = (FluidElementNumberX*2+1)*(FluidElementNumberYsolid*2+1+FluidElementNumberYrest*2+1+1);
AboveSolidArrayIndices = ...
    [FirstNodeZZPlane, ...
    FirstNodeZZPlane+1, ...
    FirstNodeZZPlane+2, ...
    FirstNodeZZPlane+NumberOfFluidXNodes, ...
    FirstNodeZZPlane+1+NumberOfFluidXNodes, ...
    FirstNodeZZPlane+2+NumberOfFluidXNodes, ...
    FirstNodeZZPlane+NumberOfFluidXNodes*2, ...
    FirstNodeZZPlane+1+NumberOfFluidXNodes*2, ...
    FirstNodeZZPlane+2+NumberOfFluidXNodes*2, ...
    FirstNodeZZPlane+NumberOfFluidNodesZZplane, ...
    FirstNodeZZPlane+1+NumberOfFluidNodesZZplane, ...
    FirstNodeZZPlane+2+NumberOfFluidNodesZZplane, ...
    FirstNodeZZPlane+NumberOfFluidXNodes+NumberOfFluidNodesZZplane, ...
    FirstNodeZZPlane+1+NumberOfFluidXNodes+NumberOfFluidNodesZZplane, ...
    FirstNodeZZPlane+2+NumberOfFluidXNodes+NumberOfFluidNodesZZplane, ...
    FirstNodeZZPlane+NumberOfFluidXNodes*2+NumberOfFluidNodesZZplane, ...
    FirstNodeZZPlane+1+NumberOfFluidXNodes*2+NumberOfFluidNodesZZplane, ...
    FirstNodeZZPlane+2+NumberOfFluidXNodes*2+NumberOfFluidNodesZZplane, ...
    FirstNodeZZPlane+NumberOfFluidNodesZZplane*2, ...
    FirstNodeZZPlane+1+NumberOfFluidNodesZZplane*2, ...
    FirstNodeZZPlane+2+NumberOfFluidNodesZZplane*2, ...
    FirstNodeZZPlane+NumberOfFluidXNodes+NumberOfFluidNodesZZplane*2, ...
    FirstNodeZZPlane+1+NumberOfFluidXNodes+NumberOfFluidNodesZZplane*2, ...
    FirstNodeZZPlane+2+NumberOfFluidXNodes+NumberOfFluidNodesZZplane*2, ...
    FirstNodeZZPlane+NumberOfFluidXNodes*2+NumberOfFluidNodesZZplane*2, ...
    FirstNodeZZPlane+1+NumberOfFluidXNodes*2+NumberOfFluidNodesZZplane*2, ...
    FirstNodeZZPlane+2+NumberOfFluidXNodes*2+NumberOfFluidNodesZZplane*2];
% % first row
for i = 2:FluidElementNumberX
    AboveSolidArrayIndices = [AboveSolidArrayIndices; ...
        AboveSolidArrayIndices(end,:)+2];
end
NumberOfAboveSolidArrayIndices = size(AboveSolidArrayIndices, 1);
% % second row till FluidY
for i = 2:FluidElementNumberYsolid+1+FluidElementNumberYrest
    AboveSolidArrayIndices = [AboveSolidArrayIndices; ...
        AboveSolidArrayIndices(end+1-NumberOfAboveSolidArrayIndices:end,:)+NumberOfFluidXNodes*2];
end
NumberOfAboveSolidPlaneArrayIndices = size(AboveSolidArrayIndices, 1);
% % above solid till FluidZ
for i = 2:FluidElementNumberZFluidZ
    AboveSolidArrayIndices = [AboveSolidArrayIndices; ...
        AboveSolidArrayIndices(end+1-NumberOfAboveSolidPlaneArrayIndices:end,:)+NumberOfFluidNodesZZplane*2];
end
ArrayIndices = [ArrayIndices; AboveSolidArrayIndices];

FluidElementNodeNumbers = FluidNodes(ArrayIndices);
% Fluid interface xi positions
FluidXi1 = [0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0, ...
    0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0, ...
    0.0, 0.5, 1.0, 0.0, 0.5, 1.0, 0.0, 0.5, 1.0];
FluidXi2 = [0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, ...
    0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, ...
    0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0];
FluidXi3 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...
    0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, ...
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
% Fluid interface node numbers
% NOTE if/elseif conditions might both be true on interface lines, but as
% we iterate over each fluid node only once we don't create duplicates
count = 1;
for i = 1:NumberOfFluidNodes
    % x = SolidOriginX, x = SolidOriginX+SolidX planes
    if ((abs(FluidGeometryX(i)-SolidOriginX)<SolidY/3 || ...
            abs(FluidGeometryX(i)-(SolidOriginX+SolidX))<SolidY/3) && ...
            (FluidGeometryY(i)<SolidOriginY+SolidY+SolidY/3 && ...
            FluidGeometryY(i)>SolidOriginY-SolidY/3) && ...
            FluidGeometryZ(i)<SolidOriginZ+SolidZ+SolidY/3)
        FluidInterfaceNodes(count) = FluidNodes(i);
        count = count + 1;
    % y = SolidOriginY, y = SolidOriginY+SolidY planes
    elseif (FluidGeometryX(i)>SolidOriginX-SolidY/3 && ...
            FluidGeometryX(i)<SolidOriginX+SolidX+SolidY/3 && ...
            (abs(FluidGeometryY(i)-SolidOriginY)<SolidY/3 || ...
            abs(FluidGeometryY(i)-SolidOriginY-SolidY)<SolidY/3) && ...
            FluidGeometryZ(i)<SolidOriginZ+SolidZ+SolidY/3)
        FluidInterfaceNodes(count) = FluidNodes(i);
        count = count + 1;
    % z = SolidOriginZ+SolidZ plane
    elseif (FluidGeometryX(i)>SolidOriginX-SolidY/3 && ...
            FluidGeometryX(i)<SolidOriginX+SolidX+SolidY/3 && ...
            FluidGeometryY(i)<SolidOriginY+SolidY+SolidY/3 && ...
            FluidGeometryY(i)>SolidOriginY-SolidY/3 && ...
            abs(FluidGeometryZ(i)-SolidOriginZ-SolidZ)<SolidY/3)
        FluidInterfaceNodes(count) = FluidNodes(i);
        count = count + 1;
    end
end
% Fluid interface element node numbers
count = 1;
countToNine = 0;
for i = 1:size(FluidElementNodeNumbers, 1)
    for j = 1:size(FluidElementNodeNumbers, 2)
        if (sum(FluidElementNodeNumbers(i, j)==FluidInterfaceNodes)~=0)
            % Node number, element number, xi1, xi2, xi3
            countToNine = countToNine + 1;
            FluidInterfaceNodeInformation(count, 1) = FluidElementNodeNumbers(i, j);
            FluidInterfaceNodeInformation(count, 2) = i;
            FluidInterfaceNodeInformation(count, 3) = FluidXi1(j);
            FluidInterfaceNodeInformation(count, 4) = FluidXi2(j);
            FluidInterfaceNodeInformation(count, 5) = FluidXi3(j);
            count = count + 1;
        end
    end
    % below:
    % necessary cause 3D elements share lines with solid elements
    % but we only need faces for mesh connectivity
    if (count>1 && countToNine>0)
        if (countToNine<9) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            count = count - countToNine;
            if (count==1)
                FluidInterfaceNodeInformation = [0, 0, 0, 0, 0];
            else
                FluidInterfaceNodeInformation = FluidInterfaceNodeInformation(1:count-1, :);
            end
        elseif (countToNine>9)
            % we have conforming elements! Therefore:
            countToNine
            if (count-1-countToNine>0)
                FluidInterfaceNodeInformation(count-1-countToNine:count-1,:)
            end
            disp 'Invalid number of interface nodes for fluid element'
        else
            % OK. We have faces with 9 connected nodes
        end
    end
    countToNine = 0;
end

count = 1;
for i = 1:size(InterfaceElementNodeNumbers, 1)
    for j = 1:size(InterfaceElementNodeNumbers, 2)
    	% Node number, element number, xi1, xi2
        InterfaceInterfaceNodeInformation(count, 1) = InterfaceElementNodeNumbers(i, j);
        InterfaceInterfaceNodeInformation(count, 2) = i;
        InterfaceInterfaceNodeInformation(count, 3) = InterfaceXi1(j);
        InterfaceInterfaceNodeInformation(count, 4) = InterfaceXi2(j);
        count = count + 1;
    end
end

InterfaceNodeNumbers = 1:size(InterfaceGeometryX, 2);
% InterfaceNodes (2nd to be done, sorted nodes) %%%%%%%%%%%%%%%%%%%%% CHECK
if (size(InterfaceNodes, 2)==size(FluidInterfaceNodes, 2))
    InterfaceNodes(2, :) = FluidInterfaceNodes;
else
    disp 'Differing number of interface nodes!'
    disp 'Number of solid interface nodes:'
    size(InterfaceNodes, 2)
    disp 'Number of fluid interface nodes:'
    size(FluidInterfaceNodes, 2)
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BOUNDARY CONDITIONS
disp 'BOUNDARY CONDITIONS'
% no displacements
NoDisplacementNodes = unique((SolidGeometryZ==0).*SolidNodes);
if (NoDisplacementNodes(1)==0)
    NoDisplacementNodes = NoDisplacementNodes(2:end);
end
% FixedNodes
FixedNodes = unique([unique((FluidGeometryZ==0).*FluidNodes), ...
    unique((FluidGeometryZ==FluidGeometryZ(end)).*FluidNodes), ...
    unique((FluidGeometryX==0).*FluidNodes), ...
    unique((FluidGeometryX==FluidGeometryX(end)).*FluidNodes), ...
    unique((FluidGeometryY==0).*FluidNodes), ...
    unique((FluidGeometryY==FluidGeometryY(end)).*FluidNodes)]);
if (FixedNodes(1)==0)
    FixedNodes = FixedNodes(2:end);
end
% FixedZNodes
FixedZNodes = FluidNodes(end-NumberOfFluidNodesZZplane+1:end);
% MovedNodes
MovedNodes = unique(FluidInterfaceNodes);
% MovedYNodes
MovedYNodes = FluidNodes(end-NumberOfFluidNodesZZplane+1:end);
% InletNodes
InletNodes = unique((FluidGeometryY==0).*FluidNodes);
if (InletNodes(1)==0)
    InletNodes = InletNodes(2:end);
end
% NoSlipNodes
NoSlipNodes = unique((FluidGeometryZ==0).*FluidNodes);
if (NoSlipNodes(1)==0)
    NoSlipNodes = NoSlipNodes(2:end);
end
% OutletNodes
OutletNodes = unique((abs(FluidGeometryY-FluidGeometryY(end))<SolidY/3).*FluidNodes);
if (OutletNodes(1)==0)
    OutletNodes = OutletNodes(2:end);
end
OutletNodes = unique((OutletNodes<=NumberOfFluidPressureNodes).*OutletNodes);
if (OutletNodes(1)==0)
    OutletNodes = OutletNodes(2:end);
end
% SlipNodes
SlipNodes = unique([unique((FluidGeometryX==0).*FluidNodes), ...
    unique((FluidGeometryX==FluidGeometryX(end)).*FluidNodes), ...
    unique((FluidGeometryZ==FluidGeometryZ(end)).*FluidNodes)]);
if (SlipNodes(1)==0)
    SlipNodes = SlipNodes(2:end);
end
% LagrangeNodes
LagrangeNodes = unique((InterfaceGeometryZ==0).*InterfaceNodeNumbers);
if (LagrangeNodes(1)==0)
    LagrangeNodes = LagrangeNodes(2:end);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OUTPUT
disp 'OUTPUT'
% SolidNodes
% FluidNodes
% InterfaceNodeNumbers
% SolidGeometryX case
% SolidGeometryY
% SolidGeometryZ
% FluidGeometryX case
% FluidGeometryY
% FluidGeometryZ
% InterfaceGeometryX case
% InterfaceGeometryY
% InterfaceGeometryZ
% SolidElementNodeNumbers
% FluidElementNodeNumbers
% InterfaceElementNodeNumbers
% InterfaceInterfaceNodeInformation (node, element, xi1, xi2, xi3)
% SolidInterfaceNodeInformation (node, element, xi1, xi2, xi3)
% FluidInterfaceNodeInformation (node, element, xi1, xi2, xi3)
% NoDisplacementNodes
% FixedNodes
% FixedZNodes
% MovedNodes
% MovedYNodes
% InletNodes
% NoSlipNodes
% OutletNodes
% SlipNodes
% LagrangeNodes

intSpec = '%d ';
realSpec = '%1.16E\n';

% open files
% elements, nodes, geometry
file001 = fopen('Plate3DSolidNodes.txt','w');
file002 = fopen('Plate3DFluidNodes.txt','w');
file003 = fopen('Plate3DInterfaceNodes.txt','w');
file004 = fopen('Plate3DSolidX.txt','w');
file005 = fopen('Plate3DSolidY.txt','w');
file006 = fopen('Plate3DSolidZ.txt','w');
file007 = fopen('Plate3DFluidX.txt','w');
file008 = fopen('Plate3DFluidY.txt','w');
file009 = fopen('Plate3DFluidZ.txt','w');
file010 = fopen('Plate3DInterfaceX.txt','w');
file011 = fopen('Plate3DInterfaceY.txt','w');
file012 = fopen('Plate3DInterfaceZ.txt','w');
file013 = fopen('Plate3DSolidElementNodeNumbers.txt','w');
file014 = fopen('Plate3DFluidElementNodeNumbers.txt','w');
file015 = fopen('Plate3DInterfaceElementNodeNumbers.txt','w');
file016 = fopen('Plate3DSortedInterfaceNodes.txt','w');
file017_1 = fopen('Plate3DSolidInterfaceNodeInformationNodeElement.txt','w');
file017_2 = fopen('Plate3DSolidInterfaceNodeInformationXi.txt','w');
file018_1 = fopen('Plate3DFluidInterfaceNodeInformationNodeElement.txt','w');
file018_2 = fopen('Plate3DFluidInterfaceNodeInformationXi.txt','w');
file019_1 = fopen('Plate3DInterfaceInterfaceNodeInformationNodeElement.txt','w');
file019_2 = fopen('Plate3DInterfaceInterfaceNodeInformationXi.txt','w');
% boundary conditions
file020 = fopen('Plate3DdisplacementBC.txt','w');
file021 = fopen('Plate3DfixedNodesBC.txt','w');
file022 = fopen('Plate3DfixedZNodesBC.txt','w');
file023 = fopen('Plate3DmovedNodesBC.txt','w');
file024 = fopen('Plate3DmovedYNodesBC.txt','w');
file025 = fopen('Plate3DinletBC.txt','w');
file026 = fopen('Plate3DnoSlipBC.txt','w');
file027 = fopen('Plate3DpressureBC.txt','w');
file028 = fopen('Plate3DslipBC.txt','w');
file029 = fopen('Plate3DlagrangeNodes.txt','w');

% store array size information
fprintf(file001,'%d\n',size(SolidNodes, 2));
fprintf(file002,'%d\n',size(FluidNodes, 2));
fprintf(file003,'%d\n',size(InterfaceNodeNumbers, 2));
fprintf(file004,'%d\n',size(SolidGeometryX, 2));
fprintf(file005,'%d\n',size(SolidGeometryY, 2));
fprintf(file006,'%d\n',size(SolidGeometryZ, 2));
fprintf(file007,'%d\n',size(FluidGeometryX, 2));
fprintf(file008,'%d\n',size(FluidGeometryY, 2));
fprintf(file009,'%d\n',size(FluidGeometryZ, 2));
fprintf(file010,'%d\n',size(InterfaceGeometryX, 2));
fprintf(file011,'%d\n',size(InterfaceGeometryY, 2));
fprintf(file012,'%d\n',size(InterfaceGeometryZ, 2));
fprintf(file013,'%d\n',size(SolidElementNodeNumbersQ, 1));
fprintf(file014,'%d\n',size(FluidElementNodeNumbers, 1));
fprintf(file015,'%d\n',size(InterfaceElementNodeNumbers, 1));
fprintf(file016,'%d\n',size(InterfaceNodes, 2));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf(file017_1,'%d\n',size(SolidInterfaceNodeInformation, 1));
fprintf(file017_2,'%d\n',size(SolidInterfaceNodeInformation, 1));
fprintf(file018_1,'%d\n',size(FluidInterfaceNodeInformation, 1));
fprintf(file018_2,'%d\n',size(FluidInterfaceNodeInformation, 1));
fprintf(file019_1,'%d\n',size(InterfaceInterfaceNodeInformation, 1));
fprintf(file019_2,'%d\n',size(InterfaceInterfaceNodeInformation, 1));
fprintf(file020,'%d\n',size(NoDisplacementNodes, 2));
fprintf(file021,'%d\n',size(FixedNodes, 2));
fprintf(file022,'%d\n',size(FixedZNodes, 2));
fprintf(file023,'%d\n',size(MovedNodes, 2));
fprintf(file024,'%d\n',size(MovedYNodes, 2));
fprintf(file025,'%d\n',size(InletNodes, 2));
fprintf(file026,'%d\n',size(NoSlipNodes, 2));
fprintf(file027,'%d\n',size(OutletNodes, 2));
fprintf(file028,'%d\n',size(SlipNodes, 2));
fprintf(file029,'%d\n',size(LagrangeNodes, 2));

% write mesh information
fprintf(file001,'%d\n',SolidNodes);
fprintf(file002,'%d\n',FluidNodes);
fprintf(file003,'%d\n',InterfaceNodeNumbers);
fprintf(file004,realSpec,SolidGeometryX);
fprintf(file005,realSpec,SolidGeometryY);
fprintf(file006,realSpec,SolidGeometryZ);
fprintf(file007,realSpec,FluidGeometryX);
fprintf(file008,realSpec,FluidGeometryY);
fprintf(file009,realSpec,FluidGeometryZ);
fprintf(file010,realSpec,InterfaceGeometryX);
fprintf(file011,realSpec,InterfaceGeometryY);
fprintf(file012,realSpec,InterfaceGeometryZ);
for i = 1:size(SolidElementNodeNumbersQ, 1)
    fprintf(file013,intSpec,SolidElementNodeNumbersQ(i, :));
    fprintf(file013,'\n');
end
for i = 1:size(FluidElementNodeNumbers, 1)
    fprintf(file014,intSpec,FluidElementNodeNumbers(i, :));
    fprintf(file014,'\n');
end
for i = 1:size(InterfaceElementNodeNumbers, 1)
    fprintf(file015,intSpec,InterfaceElementNodeNumbers(i, :));
    fprintf(file015,'\n');
end
for i = 1:size(InterfaceNodes, 2)
    fprintf(file016,'%d ',InterfaceNodes(:,i));
    fprintf(file016,'\n');
end
for i = 1:size(SolidInterfaceNodeInformation, 1)
    fprintf(file017_1,'%d ',SolidInterfaceNodeInformation(i, 1:2));
    fprintf(file017_1,'\n');
    fprintf(file017_2,'%1.16E ',SolidInterfaceNodeInformation(i, 3:5));
    fprintf(file017_2,'\n');
end
for i = 1:size(FluidInterfaceNodeInformation, 1)
    fprintf(file018_1,'%d ',FluidInterfaceNodeInformation(i, 1:2));
    fprintf(file018_1,'\n');
    fprintf(file018_2,'%1.16E ',FluidInterfaceNodeInformation(i, 3:5));
    fprintf(file018_2,'\n');
end
for i = 1:size(InterfaceInterfaceNodeInformation, 1)
    fprintf(file019_1,'%d ',InterfaceInterfaceNodeInformation(i, 1:2));
    fprintf(file019_1,'\n');
    fprintf(file019_2,'%1.16E ',InterfaceInterfaceNodeInformation(i, 3:4));
    fprintf(file019_2,'\n');
end
fprintf(file020,intSpec,NoDisplacementNodes);
fprintf(file021,intSpec,FixedNodes);
fprintf(file022,intSpec,FixedZNodes);
fprintf(file023,intSpec,MovedNodes);
fprintf(file024,intSpec,MovedYNodes);
fprintf(file025,intSpec,InletNodes);
fprintf(file026,intSpec,NoSlipNodes);
fprintf(file027,intSpec,OutletNodes);
fprintf(file028,intSpec,SlipNodes);
fprintf(file029,intSpec,LagrangeNodes);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%plot3(SolidGeometryX, SolidGeometryY, SolidGeometryZ, '*')
plot3(SolidGeometryPressureX, SolidGeometryPressureY, ...
    SolidGeometryPressureZ, '*')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% close files
fclose(file001);
fclose(file002);
fclose(file003);
fclose(file004);
fclose(file005);
fclose(file006);
fclose(file007);
fclose(file008);
fclose(file009);
fclose(file010);
fclose(file011);
fclose(file012);
fclose(file013);
fclose(file014);
fclose(file015);
fclose(file016);
fclose(file017_1);
fclose(file017_2);
fclose(file018_1);
fclose(file018_2);
fclose(file019_1);
fclose(file019_2);
fclose(file020);
fclose(file021);
fclose(file022);
fclose(file023);
fclose(file024);
fclose(file025);
fclose(file026);
fclose(file027);
fclose(file028);
fclose(file029);

abc = clock;
[abc(4), abc(5)]

disp 'TOTAL RUNTIME:'
toc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%